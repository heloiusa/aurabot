// index.js

// Carrega as vari√°veis de ambiente do arquivo .env
require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require('@google/generative-ai');

// --- CONFIGURA√á√ïES ---

// Pega os tokens do arquivo .env
const telegramToken = process.env.TELEGRAM_BOT_TOKEN;
const geminiApiKey = process.env.GOOGLE_API_KEY;

// Inicializa o bot do Telegram
const bot = new TelegramBot(telegramToken, { polling: true });

// Inicializa o cliente do Google AI
const genAI = new GoogleGenerativeAI(geminiApiKey);

// **A INSTRU√á√ÉO DO SISTEMA: A "ALMA" DO SEU CHATBOT**
// Esta √© a parte mais importante para definir o comportamento do seu bot.
const systemInstruction = {
  role: "system",
  parts: [{ text: `
    Voc√™ √© 'Aura', um chatbot de apoio emocional e ouvinte compassivo. Seu prop√≥sito √©:
    1.  **Ouvir com Empatia:** Oferecer um espa√ßo seguro e sem julgamentos para o usu√°rio expressar seus sentimentos e pensamentos. Valide os sentimentos dele (ex: "Entendo que isso deve ser muito dif√≠cil.").
    2.  **Ser Paciente:** Nunca apresse o usu√°rio. Deixe que ele guie o ritmo da conversa.
    3.  **Fazer Perguntas Abertas:** Incentive a reflex√£o com perguntas como "Como isso fez voc√™ se sentir?", "O que passou pela sua cabe√ßa nesse momento?" ou "Tem algo mais sobre isso que voc√™ gostaria de compartilhar?".
    4.  **N√£o Ser um Terapeuta:** Voc√™ N√ÉO √© um profissional de sa√∫de mental. NUNCA d√™ conselhos m√©dicos, diagn√≥sticos ou planos de tratamento. Se o usu√°rio mencionar crises s√©rias (risco de vida, automutila√ß√£o), voc√™ deve gentilmente sugerir a busca por ajuda profissional imediata e fornecer contatos de emerg√™ncia (como o CVV no Brasil, telefone 188), afirmando claramente que a seguran√ßa dele √© a prioridade m√°xima.
    5.  **Manter a Calma e o Apoio:** Sua linguagem deve ser sempre gentil, acolhedora e positiva. Evite clich√™s e respostas rob√≥ticas.
  `}],
};

// Configura√ß√µes de seguran√ßa para o modelo Gemini
const safetySettings = [
    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },
    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },
    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

// Objeto para armazenar o hist√≥rico de conversas de cada usu√°rio
const chats = {};

console.log('ü§ñ Bot de apoio emocional iniciado e aguardando mensagens...');

// --- L√ìGICA DO BOT ---

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userInput = msg.text;

    // Ignora qualquer mensagem que n√£o seja texto
    if (!userInput) return;

    // Inicia um "digitando..." para o usu√°rio saber que o bot est√° processando
    bot.sendChatAction(chatId, 'typing');

    try {
        // Se for a primeira mensagem do usu√°rio, cria um novo hist√≥rico de chat
        if (!chats[chatId]) {
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro-latest", systemInstruction, safetySettings });
            chats[chatId] = model.startChat({
                history: [],
                generationConfig: {
                    maxOutputTokens: 1000,
                },
            });
            console.log(`Nova conversa iniciada para o chat ID: ${chatId}`);
        }

        // Envia a mensagem do usu√°rio para o Gemini e aguarda a resposta
        const chatSession = chats[chatId];
        const result = await chatSession.sendMessage(userInput);
        const response = result.response;
        const botResponse = response.text();

        // Envia a resposta do bot de volta para o usu√°rio no Telegram
        bot.sendMessage(chatId, botResponse);

    } catch (error) {
        console.error('‚ùå Erro ao processar a mensagem:', error);
        bot.sendMessage(chatId, 'Desculpe, estou com um pouco de dificuldade para processar sua mensagem agora. Vamos tentar de novo em um instante.');
    }
});

// Mensagem para o comando /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 'Ol√°! Eu sou a Aura, sua ouvinte e companheira de apoio emocional. Sinta-se √† vontade para compartilhar o que est√° em sua mente. Estou aqui para ouvir, sem julgamentos.');
});